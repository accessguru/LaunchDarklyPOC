@page "/fetchdata"
@using BlazorApp2.Shared
@using BlazorApp2.Client.FeatureFlag
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                @if (this.IsColumnVisible)
                {
                    <th>Temp. (C)</th>
                }
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    @if (this.IsColumnVisible)
                    {
                        <td>@forecast.TemperatureC</td>
                    }
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool IsColumnVisible { get; set; }

    [Inject]
    private FeatureFlagClientService FeatureFlagClientService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        const string Key = "ShowCelsius";
        this.forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");



        this.IsColumnVisible = await this.FeatureFlagClientService.Get(Key);

        this.FeatureFlagClientService.FeatureFlagUpdated += (sender, args) =>
        {
            if (args.Key.Equals(Key))
            {
                this.IsColumnVisible = args.Value;
                this.StateHasChanged();
            }
        };

    }
}
